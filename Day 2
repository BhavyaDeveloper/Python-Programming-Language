PROJECT 1 Data Types
Learn about the primitive data types in Python.
Strings
Integers
Floats
Booleans

Code Solution -
length= len("Hello")
print(length)

#susbscripting
print("hello"[4])

#OR CAN USE NEGATIVE INDICES

print("hello"[-1])

#string
print("123" + "345")

#integer
print(123+345)

#large integers
print(1234_234_345)

#boolean
print(True) #capital T

print(False) #capital F

PROJECT 2 Type Error, Chceking and Conversion
TypeError
These errors occur when you are using the wrong data type. e.g. len(12345)

Because you can only give the len() function Strings, it will refuse to work and give you a TypeError if you give it a number (Integer).

PAUSE 1. Fix the len() function so it has no more warnings or errors.
Type Checking
You can check the data type of any value or variable in python using the type() function.

print(type("abc")) #will give you <class 'str'>

PAUSE 2. Write out 4 type checks to print all 4 data types
Using the type() and print() functions to print out 4 lines into the output area so we get the full collection of data types that we learnt about. <class 'str'> <class 'int'> <class 'float'> and <class 'bool'>

Type Conversion
You can convert data into different data types using special functions. e.g.

float()

int()

str()

PAUSE 3. Make this line of code run without errors
print("Number of letters in your name: " + len(input("Enter your name")))

Code Solution -
print("Number of letters in your name: " + str(len(input("Enter your name"))))

int(12)
float(.00000)
bool(False)
str(".o-290e8ho2")

print(int("123") + int("345"))
# print(int(123) + str(345)) error
print(int(123) + int(345))
# print(int("123") + str("345")) = error is there here

#len function doesnt work with integers

print(len("12345"))

print(type("abgdfuoweh;fi"))

print(type(124355))

print(type(True))

print(type(.008798))

PROJECT 3 - Mathematical Operations

Basic Operators
Learn to use the basic mathematical operators, +, -, *, /, // and **

PEMDAS
Parentheses, Exponents, Multiplication/Division, Addition/Subtraction

PAUSE 1. What is the output of this code?
print(3 * 3 + 3 / 3 - 3)

PAUSE 2. Change the code so it outputs 3?
print(3 * 3 + 3 / 3 - 3)

Code Solution-

print(24 /5)
print(24 // 5)
print(63/2)
print(63 // 2)
print(8 // 2)
print(5 // 10)
print(8 / 9)


print("My age: " + str(12))
print(123 + 456)
print(7-3)
print(3 * 2)
print(5/3)
print(5 // 3) #removes the digits after decimal and floors it to the nearest ground number
print(2**3)

# PEMDASLR

# ()
# **
# * or /
# + or -

print(3 * 3 + 3 / 3 - 3)

# 9+3/3-3
# 9+1-3
# 10-3
# 7

PROJECT 4 - Number Manipulation

Flooring a Number
You can floor a number or remove all decimal places using the int() function which converts a floating point number (with decimal places) into an integer (whole number).

int(3.738492) # Becomes 3

Rounding a Number
However, if you want to round a decimal number to the nearest whole number using the traditional mathematical way, where anything over .5 rounds up and anything below rounds down. Then you can use the python round() function.

round(3.738492) # Becomes 4

round(3.14159) # Becomes 3

round(3.14159, 2) # Becomes 3.14

Assignment Operators
Assignment operators such as the addition assignment operator += will add the number on the right to the original value of the variable on the left and assign the new value to the variable.

+=

-=

*=

/=

f-Strings
In Python, we can use f-strings to insert a variable or an expression into a string.

age = 12

print(f"I am {age} years old")

# Will output I am 12 years old.


Code Solution-
bmi = 84 / 1.65 ** 2

print(bmi)

print (int(bmi))

print(round(bmi))

print(round(bmi,2))

#Assignment Operators

score = 3

#everytime user scores a goal

score += 1

print(score)

score -= 2

print(score)

score *= 6

print(score)

score /= 2

print(score)

#f-strings

#cncatenation happens between string characters only
print("your current value of score is " + str(score))

#programmers find this a bit more tiring and want to use something less stressing
score = 2
height = 1.8
is_winning = 5

print(f"Your score is = {score}. Your height is = {height} and teams winning by = {is_winning}.")
#f stings remove the need of putting different data types


PROJECT 5 - Tip Calculator Project
We're going to build a tip calculator.

If the bill was $150.00, split between 5 people, with 12% tip.

Each person should pay:

(150.00 / 5) * 1.12 = 33.6

After formatting the result to 2 decimal places = 33.60

Code Solution - 
print("Welcome to the tip calculator!")
bill = float(input("What was the total bill? $")) #specifying data type removes the possibility of unnecessary/unrequired data
tip = int(input("What percentage tip would you like to give? 10 12 15 "))
people = int(input("How many people to split the bill? "))

#print(f"bill*tip/people") (this is not the logic) (teh logic is to just calculate the tip and not tip to be paid by each individual person))

bill_with_tip = tip/ 100 * bill + bill
print(bill_with_tip)

#another way of doing this is

tip_as_percent = tip/100
total_tip_amount = bill * tip_as_percent
total_bill = bill + total_tip_amount
bill_per_person = total_bill/people
final_amount = round(bill_per_person, 2)

print(f"Each personshould pay : ${final_amount}")
























